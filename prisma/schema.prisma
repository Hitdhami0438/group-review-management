// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// USER LOGS MODEL
model Log {
  id      String   @id @default(uuid())
  userId  String?
  action  String
  logType LogType?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
}

enum LogType {
  SECURITY // Update Profile Like Email, Password, Etc...
  PROFILE // Add Or Update Profile Image, Url Like Github, Blog [hashnode, Medium], Linkdine, Etc...
  GROUP // Create Group Or Add member On Group, Or Delete A Group Remove Member Etc...
  ASIGNTOGROUPLEADER // When Group Leader As Asign To Current Group In Asign Group Leader To Current Grop Member.
  ASIGNTOADMIN // When Administrator Can Asign To Any User To Admin.
}

// USER ROLE ENUM
enum UserRole {
  USER
  GROUPLEADER
  ADMIN
  ADMINISTRATOR
  STANDARDUSER
  PREMIUMUSER
  ENTERPRISE
}

// USER MODEL
model User {
  id                   String    @id @default(uuid())
  username             String?   @unique
  email                String?   @unique
  password             String?
  role                 UserRole  @default(USER)
  bio                  String?
  image                String?
  isVerified           Boolean   @default(true)
  verifyCode           String?
  verifyCodeExpiry     DateTime?
  forgotpasswordToken  String?
  forgotpasswordExpiry DateTime?
  githubUrl            String?
  linkedinUrl          String?
  blogUrl              String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // User Logs
  logs Log[]

  // Any User Can Message Direct
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")

  // Group And Its Message
  group        Group[]
  groupMessage GroupMessage[]
  groupMember  GroupMember[]

  @@index([email])
  @@index([username])
  @@index([role])
  @@index([isVerified])
  @@index([createdAt])
}

// USER MESSAGE MODEL
model Message {
  id         String  @id @default(uuid())
  content    String  @db.VarChar(100)
  senderId   String?
  receiverId String?

  sentAt    DateTime @default(now())
  updatedAt DateTime @updatedAt

  sender   User? @relation("SentMessages", fields: [senderId], references: [id], onDelete: SetNull)
  receiver User? @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: SetNull)

  @@index([senderId])
}

// GROUP MODEL
model Group {
  id             String        @id @default(uuid())
  groupLeaderId  String
  members        GroupMember[]
  todo           Todo[]
  groupDeletedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Group Member Or Group Leader
  groupLeader User @relation(fields: [groupLeaderId], references: [id])

  // Group Message 
  groupMessage GroupMessage[]
}

// GROUPMESSAGE MODEL
model GroupMessage {
  id       String  @id @default(uuid())
  groupId  String
  senderId String?
  content  String  @db.VarChar(100)

  sentAt    DateTime @default(now())
  updatedAt DateTime @updatedAt

  group  Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  sender User? @relation(fields: [senderId], references: [id], onDelete: SetNull)

  @@index([groupId, senderId])
}

// GROUPMEMBER MODEL
model GroupMember {
  id      String @id @default(uuid())
  userId  String
  groupId String

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
}

// GROUP TODOPRIORITY ENUM
enum TodoPriority {
  PROCESS
  PENDING
  COMPLETED
  CANCELED
}

// GROUP TODO
model Todo {
  id          String       @id @default(uuid())
  groupId     String
  content     String       @db.VarChar(300)
  priority    TodoPriority @default(PENDING)
  isCompleted Boolean      @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@index([groupId])
}
